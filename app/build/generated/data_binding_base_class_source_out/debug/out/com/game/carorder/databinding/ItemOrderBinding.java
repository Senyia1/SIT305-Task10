// Generated by view binder compiler. Do not edit!
package com.game.carorder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.game.carorder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView face;

  @NonNull
  public final ImageView ivShare;

  @NonNull
  public final TextView tvReceiverName;

  @NonNull
  public final TextView tvStartLoaction;

  @NonNull
  public final TextView tvTimeStart;

  private ItemOrderBinding(@NonNull LinearLayout rootView, @NonNull ImageView face,
      @NonNull ImageView ivShare, @NonNull TextView tvReceiverName,
      @NonNull TextView tvStartLoaction, @NonNull TextView tvTimeStart) {
    this.rootView = rootView;
    this.face = face;
    this.ivShare = ivShare;
    this.tvReceiverName = tvReceiverName;
    this.tvStartLoaction = tvStartLoaction;
    this.tvTimeStart = tvTimeStart;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.face;
      ImageView face = ViewBindings.findChildViewById(rootView, id);
      if (face == null) {
        break missingId;
      }

      id = R.id.iv_share;
      ImageView ivShare = ViewBindings.findChildViewById(rootView, id);
      if (ivShare == null) {
        break missingId;
      }

      id = R.id.tv_receiver_name;
      TextView tvReceiverName = ViewBindings.findChildViewById(rootView, id);
      if (tvReceiverName == null) {
        break missingId;
      }

      id = R.id.tv_start_loaction;
      TextView tvStartLoaction = ViewBindings.findChildViewById(rootView, id);
      if (tvStartLoaction == null) {
        break missingId;
      }

      id = R.id.tv_time_start;
      TextView tvTimeStart = ViewBindings.findChildViewById(rootView, id);
      if (tvTimeStart == null) {
        break missingId;
      }

      return new ItemOrderBinding((LinearLayout) rootView, face, ivShare, tvReceiverName,
          tvStartLoaction, tvTimeStart);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
